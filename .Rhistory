var1 = var1 - 1
}
}
#con este ejemplo se evalua el uso sentencias de control
var1 = 50
var2 = 0
var3 = 5000
#if con una expresion
while(var1 > 0){
var2 = 1
if(var2 != 0){
var3 = var3 - var1
var1 = var1 - 1
}
if(var3 < 4000){
var2 = 0
}
}
#con este ejemplo se evalua el uso sentencias de control
var1 = 50
var2 = 0
var3 = 5000
#if con una expresion
while(var1 > 0){
var2 = 1
if(var2 != 0){
var3 = var3 - var1
var1 = var1 - 1
}
if(var3 < 4000){
var1 = 0
}
}
#con este ejemplo se evalua el uso sentencias de control
var1 = 50
var2 = 0
var3 = 5000
#if con una expresion
while(var1 > 0){
var2 = 1
if(var2 != 0){
var3 = var3 - var1
var1 = var1 - 1
}
if(var3 < 4000){
var3 = 4200
var1 = 0
}
}
#anidamiento de if con mas de una condicion
varw = 0
varx = 10
vary = 20
varz = 30
#esta condicion se debe cumplir
if(varx > 5 & vary < 50){
varw = varw + 1
}
#esta condicion se debe cumplir
if(varz > 100 | varx == 10){
varw = varw + 1
}
#esta condicion NO se debe cumplir
if(varx != 10 & vary != 20 & varz == 31){
varw = varw + 1
}
#probando los limites maximos de valores enteros
int var1
reticulate::repl_python()
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
def f1(c):
global long_actual_identificador
global long_max_identificador
if(long_actual_identificador < long_max_identificador):
global identificador
identificador = identificador + c
long_actual_identificador = long_actual_identificador + 1
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
def f1(c):
global long_actual_identificador
global long_max_identificador
if(long_actual_identificador < long_max_identificador):
global identificador
identificador = identificador + c
long_actual_identificador = long_actual_identificador + 1
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
def f1(c):
global long_actual_identificador
global long_max_identificador
if(long_actual_identificador < long_max_identificador):
global identificador
identificador = identificador + c
long_actual_identificador = long_actual_identificador + 1
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
int(constante) <= long_max_constante
def f1(c):
global long_actual_identificador
global long_max_identificador
if(long_actual_identificador < long_max_identificador):
global identificador
identificador = identificador + c
long_actual_identificador = long_actual_identificador + 1
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
f1("v")
f1("a")
f1("r")
f1("i")
f1("a")
f1("b")
f1("l")
f1("e")
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante)
global constante
constante = constante + c
def f2(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def my_function(fname):
print(fname + " Refsnes")
my_function("Emil")
def my_function(fname):
print(fname + " Refsnes")
my_function("Emil")
def my_function(c):
print(c + " Refsnes")
def my_function(c):
global long_max_constante
print(c + " Refsnes")
def my_function(c):
global long_max_constante
print(c + " Refsnes")
global constante
constante = constante + c
def my_function(c):
global long_max_constante
global constante
constante = constante + c
def my_function(c):
global long_max_constante
if(int(constante) <= long_max_constante):
global constante
constante = constante + c
def my_function(c):
global long_max_constante
if(constante <= long_max_constante):
global constante
constante = constante + c
def my_function(c):
global long_max_constante
if constante <= long_max_constante:
global constante
constante = constante + c
def my_function(c):
global long_max_constante
if constante < long_max_constante:
global constante
constante = constante + c
constante = 0
def my_function(c):
global long_max_constante
if(constante < long_max_constante):
global constante
constante = constante + c
def my_function(c):
global long_max_constante
if constante < long_max_constante:
global constante
constante = constante + c
def my_function(c):
global long_max_constante
global constante
if constante < long_max_constante:
constante = constante + c
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
def f1(c):
global long_actual_identificador
global long_max_identificador
if long_actual_identificador < long_max_identificador:
global identificador
identificador = identificador + c
long_actual_identificador = long_actual_identificador + 1
def f2(c):
global long_max_constante
global constante
if constante < long_max_constante:
constante = constante + c
f2("2")
def a_numerico(string):
if string == "":
return 0
else:
return int(string)
def f2(c):
global long_max_constante
global constante
if a_numerico(constante) < long_max_constante:
constante = constante + c
f2("2")
f2("0")
f2("8")
f2("0")
#CONSTANTE
#inicializa un string con el contenido de los digitos recibidos
def f2(c):
global long_max_constante
global constante
aux = constante + c
if a_numerico(aux) < long_max_constante:
constante = aux
constante = ""
f2("6")
f2("5")
f2("5")
f2("3")
f2("6")
f2("0")
import pandas as p
import pandas as pd
tabla_simbolos = pd.DataFrame()
f1("v")
f1("a")
f1("r")
f1("i")
f1("a")
f1("b")
f1("l")
f1("e")
tabla_simbolos["nombre"] = None
tabla_simbolos["tipo"] = None
tabla_simbolos["valor"] = None
tabla_simbolos["longitud"] = None
tabla_simbolos
tabla_simbolos["nombre"] = "_" + identificador
tabla_simbolos
tabla_simbolos["nombre"]
print(tabla_simbolos)
print(tabla_simbolos["nombre"])
"_" + identificador
tabla_simbolos = pd.DataFrame()
tabla_simbolos["nombre"] = None
tabla_simbolos["valor"] = None
tabla_simbolos["longitud"] = None
long_actual_identificador
tabla_simbolos["nombre"] = "_" + identificador
tabla_simbolos["valor"] = identificador
tabla_simbolos["longitud"] = long_actual_identificador
print(tabla_simbolos["nombre"])
print(tabla_simbolos)
tabla_simbolos
tabla_simbolos = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos
tabla_simbolos
f1("v")
f1("a")
f1("r")
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
f1("v")
f1("a")
f1("r")
f2("5")
f2("3")
f2("6")
tabla_simbolos = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos
print(tabla_simbolos)
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.append(row)
print(tabla_simbolos)
import pandas as pd
#tabla de simbolos con columnas principales
tabla_simbolos = pd.DataFrame()
tabla_simbolos["nombre"] = None
tabla_simbolos["valor"] = None
tabla_simbolos["longitud"] = None
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
f1("v")
f1("a")
f1("r")
f1("i")
f2("5")
f2("5")
f2("3")
f2("6")
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.append(row)
tabla_simbolos.concat(row)
tabla_simbolos.loc[len(tabla_simbolos)] = row
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
len(tabla_simbolos)
print(tabla_simbolos)
import pandas as pd
#tabla de simbolos con columnas principales
tabla_simbolos = pd.DataFrame()
tabla_simbolos["nombre"] = None
tabla_simbolos["valor"] = None
tabla_simbolos["longitud"] = None
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
f1("v")
f1("a")
f1("r")
f1("i")
f1("a")
f1("b")
f1("l")
f1("e")
f2("6")
f2("5")
f2("5")
f2("3")
f2("6")
f2("0")
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
#variables
identificador = ""
long_max_identificador = 6
long_actual_identificador = 0
constante = ""
long_max_constante = pow(2, 16) - 1
f1("r")
f1("i")
f1("a")
f1("b")
f2("3")
f2("6")
f2("0")
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
print(tabla_simbolos)
#funcion para reiniciar el identificador
def limpiarIdentificador():
global identificador
global long_actual_identificador
identificador = ""
long_actual_identificador = 0
#funcion para reiniciar la constante
def limpiarConstante():
global constante
constante = ""
limpiarIdentificador()
limpiarConstante()
f1("v")
f1("r")
f1("a")
f1("l")
f2("6")
f2("3")
f2("0")
row = ["_" + identificador, identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
print(tabla_simbolos)
#agrega el guion bajo al identificador
def guionId(identif):
return "_" + identif
guionId(identificador)
(tabla_simbolos.index == '_variab').any()
(tabla_simbolos.index == '_vral').any()
tabla_simbolos.index
(tabla_simbolos.index == '_vral')
(tabla_simbolos.index == "_vral").any()
(tabla_simbolos.index == "vral").any()
(tabla_simbolos.index == "_vral").any()
print(tabla_simbolos)
tabla_simbolos
tabla_simbolos.index
tabla_simbolos.index == "_vral"
tabla_simbolos.index
tabla_simbolos["nombre"] == "_vral"
(tabla_simbolos["nombre"] == "_vral").any()
def f4():
if (tabla_simbolos["nombre"] == guionId(identificador)).any():
pass
else:
global tabla_simbolos
row = [guionId(identificador), identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
def f4():
global tabla_simbolos
if (tabla_simbolos["nombre"] == guionId(identificador)).any():
pass
else:
row = [guionId(identificador), identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
import pandas as pd
#tabla de simbolos con columnas principales
tabla_simbolos = pd.DataFrame()
tabla_simbolos["nombre"] = None
tabla_simbolos["valor"] = None
tabla_simbolos["longitud"] = None
def f4():
global tabla_simbolos
if (tabla_simbolos["nombre"] == guionId(identificador)).any():
pass
else:
row = [guionId(identificador), identificador, long_actual_identificador]
tabla_simbolos.loc[len(tabla_simbolos)] = row
f1("v")
f1("a")
f1("r")
f2("6")
f2("5")
print(tabla_simbolos)
f4()
print(tabla_simbolos)
f4()
print(tabla_simbolos)
def f5():
global tabla_simbolos
if (tabla_simbolos["nombre"] == guionId(constante)).any():
pass
else:
row = [guionId(constante), constante, "-"]
tabla_simbolos.loc[len(tabla_simbolos)] = row
f5()
print(tabla_simbolos)
def f6():
None
f6()
print(tabla_simbolos)
