
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTDIVrightURESTAASIG CTE DIV ID MULT PARA PARC RESTA SUMAprogram : program statementprogram : statementstatement : expressionstatement : ID ASIG expressionexpression : expression SUMA termexpression : expression RESTA termexpression : termterm : term MULT factorterm : term DIV factorterm : factorfactor : CTEfactor : RESTA CTE %prec URESTAfactor : IDfactor : PARA expression PARCfactor : RESTA PARA expression PARC %prec URESTA'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,26,27,],[4,4,-2,-3,-13,-7,-10,-11,19,-1,19,19,19,19,19,-12,19,-13,-5,-6,-4,-8,-9,-14,-15,]),'CTE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,26,27,],[8,8,-2,-3,-13,-7,16,-10,-11,8,-1,8,8,8,8,8,-12,8,-13,-5,-6,-4,-8,-9,-14,-15,]),'RESTA':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[6,6,-2,12,-13,-7,-10,-11,6,-1,6,6,6,6,6,-12,6,12,-13,-5,-6,12,-8,-9,12,-14,-15,]),'PARA':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,26,27,],[9,9,-2,-3,-13,-7,17,-10,-11,9,-1,9,9,9,9,9,-12,9,-13,-5,-6,-4,-8,-9,-14,-15,]),'$end':([1,2,3,4,5,7,8,10,16,19,20,21,22,23,24,26,27,],[0,-2,-3,-13,-7,-10,-11,-1,-12,-13,-5,-6,-4,-8,-9,-14,-15,]),'SUMA':([3,4,5,7,8,16,18,19,20,21,22,23,24,25,26,27,],[11,-13,-7,-10,-11,-12,11,-13,-5,-6,11,-8,-9,11,-14,-15,]),'ASIG':([4,],[13,]),'MULT':([4,5,7,8,16,19,20,21,23,24,26,27,],[-13,14,-10,-11,-12,-13,14,14,-8,-9,-14,-15,]),'DIV':([4,5,7,8,16,19,20,21,23,24,26,27,],[-13,15,-10,-11,-12,-13,15,15,-8,-9,-14,-15,]),'PARC':([5,7,8,16,18,19,20,21,23,24,25,26,27,],[-7,-10,-11,-12,26,-13,-5,-6,-8,-9,27,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,10,]),'expression':([0,1,9,13,17,],[3,3,18,22,25,]),'term':([0,1,9,11,12,13,17,],[5,5,5,20,21,5,5,]),'factor':([0,1,9,11,12,13,14,15,17,],[7,7,7,7,7,7,23,24,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_statement_prog','main.py',63),
  ('program -> statement','program',1,'p_statement_prog_s','main.py',68),
  ('statement -> expression','statement',1,'p_statement_expr','main.py',73),
  ('statement -> ID ASIG expression','statement',3,'p_expression_asig','main.py',78),
  ('expression -> expression SUMA term','expression',3,'p_expression_suma','main.py',83),
  ('expression -> expression RESTA term','expression',3,'p_expression_resta','main.py',88),
  ('expression -> term','expression',1,'p_expression_term','main.py',93),
  ('term -> term MULT factor','term',3,'p_term_mult','main.py',98),
  ('term -> term DIV factor','term',3,'p_term_div','main.py',103),
  ('term -> factor','term',1,'p_term_factor','main.py',108),
  ('factor -> CTE','factor',1,'p_factor_cte','main.py',113),
  ('factor -> RESTA CTE','factor',2,'p_factor_cte_n','main.py',117),
  ('factor -> ID','factor',1,'p_factor_alt','main.py',123),
  ('factor -> PARA expression PARC','factor',3,'p_factor_expr','main.py',132),
  ('factor -> RESTA PARA expression PARC','factor',4,'p_factor_expr_n','main.py',137),
]
