
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTDIVrightUMINUSASIG CTE DIV ID MULT PARA PARC RESTA SUMAprogram : program statementprogram : statementstatement : expressionstatement : ID ASIG expressionexpression : expression SUMA termexpression : expression RESTA termexpression : termexpression : RESTA expression %prec UMINUSexpression : SUMA expressionterm : term MULT factorterm : term DIV factorterm : factorfactor : CTEfactor : IDfactor : PARA expression PARC'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,],[4,4,-2,-3,-14,16,-7,16,-12,-13,16,-1,16,16,16,-9,-14,16,16,-8,-5,-6,-4,-10,-11,-15,]),'RESTA':([0,1,2,3,4,5,6,7,8,9,10,11,14,15,16,19,20,21,22,23,24,25,26,],[7,7,-2,13,-14,7,-7,7,-12,-13,7,-1,7,-9,-14,-8,13,-5,-6,13,-10,-11,-15,]),'SUMA':([0,1,2,3,4,5,6,7,8,9,10,11,14,15,16,19,20,21,22,23,24,25,26,],[5,5,-2,12,-14,5,-7,5,-12,-13,5,-1,5,-9,-14,-8,12,-5,-6,12,-10,-11,-15,]),'CTE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,],[9,9,-2,-3,-14,9,-7,9,-12,-13,9,-1,9,9,9,-9,-14,9,9,-8,-5,-6,-4,-10,-11,-15,]),'PARA':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,],[10,10,-2,-3,-14,10,-7,10,-12,-13,10,-1,10,10,10,-9,-14,10,10,-8,-5,-6,-4,-10,-11,-15,]),'$end':([1,2,3,4,6,8,9,11,15,16,19,21,22,23,24,25,26,],[0,-2,-3,-14,-7,-12,-13,-1,-9,-14,-8,-5,-6,-4,-10,-11,-15,]),'ASIG':([4,],[14,]),'MULT':([4,6,8,9,16,21,22,24,25,26,],[-14,17,-12,-13,-14,17,17,-10,-11,-15,]),'DIV':([4,6,8,9,16,21,22,24,25,26,],[-14,18,-12,-13,-14,18,18,-10,-11,-15,]),'PARC':([6,8,9,15,16,19,20,21,22,24,25,26,],[-7,-12,-13,-9,-14,-8,26,-5,-6,-10,-11,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,11,]),'expression':([0,1,5,7,10,14,],[3,3,15,19,20,23,]),'term':([0,1,5,7,10,12,13,14,],[6,6,6,6,6,21,22,6,]),'factor':([0,1,5,7,10,12,13,14,17,18,],[8,8,8,8,8,8,8,8,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_statement_prog','test_parser.py',24),
  ('program -> statement','program',1,'p_statement_prog_s','test_parser.py',29),
  ('statement -> expression','statement',1,'p_statement_expr','test_parser.py',34),
  ('statement -> ID ASIG expression','statement',3,'p_expression_asig','test_parser.py',39),
  ('expression -> expression SUMA term','expression',3,'p_expression_suma','test_parser.py',44),
  ('expression -> expression RESTA term','expression',3,'p_expression_resta','test_parser.py',49),
  ('expression -> term','expression',1,'p_expression_term','test_parser.py',54),
  ('expression -> RESTA expression','expression',2,'p_expression_uminus','test_parser.py',59),
  ('expression -> SUMA expression','expression',2,'p_expression_uplus','test_parser.py',64),
  ('term -> term MULT factor','term',3,'p_term_mult','test_parser.py',77),
  ('term -> term DIV factor','term',3,'p_term_div','test_parser.py',82),
  ('term -> factor','term',1,'p_term_factor','test_parser.py',87),
  ('factor -> CTE','factor',1,'p_factor_cte','test_parser.py',92),
  ('factor -> ID','factor',1,'p_factor_alt','test_parser.py',97),
  ('factor -> PARA expression PARC','factor',3,'p_factor_expr','test_parser.py',106),
]
